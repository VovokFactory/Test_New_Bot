# bot/handlers/text_handler.py
import os
import asyncio
import logging
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from services.model_service import generate_model_response
from services.context_service import get_voice_mode
from audio_utils import generate_audio_to_opus

logger = logging.getLogger(__name__)

text_router = Router()

MAX_MSG_LEN = 4000

def _split_text(text: str, chunk: int = MAX_MSG_LEN):
    for i in range(0, len(text), chunk):
        yield text[i:i + chunk]

@text_router.message(F.text)
async def handle_text_message(message: Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    user_input = message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {user_id}): {user_input[:100]}...")

    try:
        await message.bot.send_chat_action(chat_id, "typing")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_msg = await message.reply("_–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç..._", parse_mode="Markdown")

        # –í–ê–ñ–ù–û: generate_model_response —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: (chat_id: int, prompt: str, image_bytes: bytes | None)
        response_text = await asyncio.to_thread(generate_model_response, chat_id, user_input, None)

        # –û–±–Ω–æ–≤–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        try:
            await progress_msg.edit_text("üìù –û—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!")
        except Exception:
            pass

        if not response_text:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω—ã–π
        first = True
        for chunk in _split_text(response_text):
            if first:
                await message.reply(chunk, disable_web_page_preview=True)
                first = False
            else:
                await message.answer(chunk, disable_web_page_preview=True)

        # –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if get_voice_mode(chat_id):
            try:
                await message.bot.send_chat_action(chat_id, "record_voice")
                tts_progress = await message.reply(
                    "_–û–∑–≤—É—á–∏–≤–∞—é –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è_",
                    parse_mode="Markdown"
                )

                google_api_key = os.getenv("GOOGLE_API_KEY")
                tts_model = "gemini-2.5-flash-preview-tts"

                ok, result = await generate_audio_to_opus(response_text, tts_model, google_api_key)
                if not ok:
                    await tts_progress.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {result}")
                else:
                    opus_path = result
                    try:
                        audio = FSInputFile(opus_path)
                        await message.bot.send_audio(chat_id, audio, reply_to_message_id=message.message_id)
                        await tts_progress.delete()
                    finally:
                        try:
                            os.remove(opus_path)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {e}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
                try:
                    await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
                except Exception:
                    pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
