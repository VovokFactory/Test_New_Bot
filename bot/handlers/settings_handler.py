# bot/handlers/settings_handler.py
import logging
from telebot import TeleBot
from config import MAX_HISTORY, CONTEXT_TIMEOUT
from utils.helpers import send_command_response
from services.context_service import (
    get_chat_settings, 
    set_max_history, 
    set_context_ttl, 
    clear_chat_history,
    get_voice_mode
)

logger = logging.getLogger(__name__)

def register_settings_handlers(bot: TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    @bot.message_handler(commands=['clear'])
    def clear_history(message):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        chat_id = message.chat.id
        clear_chat_history(chat_id)
        bot.reply_to(message, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!", parse_mode=None)
    
    @bot.message_handler(commands=['settings'])
    def show_settings(message):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        chat_id = message.chat.id
        settings = get_chat_settings(chat_id)
        max_history = settings.get('max_history', MAX_HISTORY)
        context_ttl = settings.get('context_ttl', CONTEXT_TIMEOUT)
        voice_mode = get_voice_mode(chat_id)
        voice_status = "–≤–∫–ª—é—á–µ–Ω" if voice_mode else "–æ—Ç–∫–ª—é—á–µ–Ω"
        
        response = (
            "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: <b>{max_history}</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: <b>{context_ttl}</b> —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{voice_status}</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"
        )
        bot.send_message(chat_id, response, parse_mode='HTML', reply_to_message_id=message.id)
    
    @bot.message_handler(commands=['help'])
    def show_help(message):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        from config import MAX_HISTORY, CONTEXT_TIMEOUT
        help_text = f"""
üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/settings - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:</b>
/set_history [—á–∏—Å–ª–æ] - –≥–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {MAX_HISTORY})
/set_context_ttl [—Å–µ–∫—É–Ω–¥—ã] - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {CONTEXT_TIMEOUT})
üîÑ <b>–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏:</b>
/chm - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å Gemini
"""
        send_command_response(bot, message.chat.id, help_text, reply_to=message.id)
    
    @bot.message_handler(commands=['set_history'])
    def handle_set_max_history(message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª—É–±–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            parts = message.text.split()
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
            value = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: 1-1000)
            if not (1 <= value <= 1000):
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000")
            
            chat_id = message.chat.id
            set_max_history(chat_id, value)
            bot.reply_to(message, f"‚úÖ –ì–ª—É–±–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value} —Å–æ–æ–±—â–µ–Ω–∏–π", parse_mode=None)
        except ValueError as e:
            if "invalid literal" in str(e):
                error_msg = (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/set_history [—á–∏—Å–ª–æ]</code>\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/set_history 10</code>"
                )
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML', reply_to_message_id=message.id)
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML', reply_to_message_id=message.id)
    
    @bot.message_handler(commands=['set_context_ttl'])
    def handle_set_context_ttl(message):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            parts = message.text.split()
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            
            value = int(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: 10 —Å–µ–∫ - 365 –¥–Ω–µ–π)
            if not (10 <= value <= 31536000): # 31536000 = 365 * 24 * 60 * 60
                raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–æ 31536000 —Å–µ–∫—É–Ω–¥ (365 –¥–Ω–µ–π)")
            
            chat_id = message.chat.id
            set_context_ttl(chat_id, value)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            if value >= 86400: # >= 1 –¥–µ–Ω—å
                days = value // 86400
                bot.reply_to(message, f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value} —Å–µ–∫—É–Ω–¥ ({days} –¥–Ω–µ–π)", parse_mode=None)
            elif value >= 3600: # >= 1 —á–∞—Å
                hours = value // 3600
                bot.reply_to(message, f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value} —Å–µ–∫—É–Ω–¥ ({hours} —á–∞—Å–æ–≤)", parse_mode=None)
            elif value >= 60: # >= 1 –º–∏–Ω—É—Ç–∞
                minutes = value // 60
                bot.reply_to(message, f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value} —Å–µ–∫—É–Ω–¥ ({minutes} –º–∏–Ω—É—Ç)", parse_mode=None)
            else:
                bot.reply_to(message, f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {value} —Å–µ–∫—É–Ω–¥", parse_mode=None)
        except ValueError as e:
            if "invalid literal" in str(e):
                error_msg = (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/set_context_ttl [—Å–µ–∫—É–Ω–¥—ã]</code>\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>/set_context_ttl 300</code> (5 –º–∏–Ω—É—Ç)\n"
                    "–ú–∞–∫—Å–∏–º—É–º: <code>/set_context_ttl 31536000</code> (365 –¥–Ω–µ–π)"
                )
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML', reply_to_message_id=message.id)
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            bot.send_message(message.chat.id, error_msg, parse_mode='HTML', reply_to_message_id=message.id)