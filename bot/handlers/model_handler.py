# bot/handlers/model_handler.py - aiogram 3.x version
import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from services.context_service import get_chat_model, set_chat_model
from mod_llm import MODELS, get_model_info

logger = logging.getLogger(__name__)

model_router = Router()

@model_router.message(Command('model'))
async def model_menu(message: Message):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    chat_id = message.chat.id
    current_model = get_chat_model(chat_id)
    current_model_info = get_model_info(current_model)
    
    model_text = f"""
ü§ñ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ –ò–ò**

üìã –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{current_model_info['name'] if current_model_info else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**
üîß ID –º–æ–¥–µ–ª–∏: `{current_model}`

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–º–µ–π—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
    keyboard_buttons = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —Å–µ–º–µ–π—Å—Ç–≤–∞–º
    families = {}
    for model in MODELS:
        family = model['family']
        if family not in families:
            families[family] = []
        families[family].append(model)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–º–µ–π—Å—Ç–≤–∞
    for family_name, family_models in families.items():
        family_display = {
            'gemini': 'üîÆ Gemini',
            'gemma': 'üíé Gemma', 
            'openrouter': 'üåê OpenRouter',
            'groq': '‚ö° Groq'
        }.get(family_name, f'ü§ñ {family_name.title()}')
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=family_display,
            callback_data=f"family_{family_name}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data="close_model_menu"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.reply(model_text, reply_markup=keyboard, parse_mode="Markdown")

@model_router.callback_query(F.data.startswith("family_"))
async def show_family_models(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–µ–º–µ–π—Å—Ç–≤–∞"""
    family_name = callback.data.split("_")[1]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —Å–µ–º–µ–π—Å—Ç–≤—É
    family_models = [model for model in MODELS if model['family'] == family_name]
    
    if not family_models:
        await callback.answer("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    family_display = {
        'gemini': 'üîÆ Gemini',
        'gemma': 'üíé Gemma',
        'openrouter': 'üåê OpenRouter', 
        'groq': '‚ö° Groq'
    }.get(family_name, f'ü§ñ {family_name.title()}')
    
    models_text = f"**{family_display} –ú–æ–¥–µ–ª–∏:**\n\n"
    
    keyboard_buttons = []
    
    for model in family_models:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –≤ —Ç–µ–∫—Å—Ç
        models_text += f"‚Ä¢ **{model['name']}**\n"
        models_text += f"  üìù {model['description']}\n"
        models_text += f"  üéØ –õ–∏–º–∏—Ç: {model['FreeRPD']} RPD\n"
        if model.get('audio_support'):
            models_text += f"  üéµ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—É–¥–∏–æ: ‚úÖ\n"
        models_text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"‚úÖ {model['name'][:30]}...",
            callback_data=f"select_{model['id'][:50]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ–º–µ–π—Å—Ç–≤–∞–º",
        callback_data="back_to_families"
    )])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(models_text, reply_markup=keyboard, parse_mode="Markdown")

@model_router.callback_query(F.data.startswith("select_"))
async def select_model(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_id = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º "select_"
    chat_id = callback.message.chat.id
    
    # –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ ID
    selected_model = get_model_info(model_id)
    
    if not selected_model:
        await callback.answer("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞
    set_chat_model(chat_id, model_id)
    
    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {selected_model['name']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    success_text = f"""
‚úÖ **–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!**

ü§ñ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å: **{selected_model['name']}**
üîß ID: `{model_id}`
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {selected_model['description']}
üéØ –õ–∏–º–∏—Ç: {selected_model['FreeRPD']} RPD
üéµ –ê—É–¥–∏–æ: {'‚úÖ' if selected_model.get('audio_support') else '‚ùå'}

–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.
"""
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    close_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_model_menu")]
    ])
    
    await callback.message.edit_text(success_text, reply_markup=close_keyboard, parse_mode="Markdown")

@model_router.callback_query(F.data == "back_to_families")
async def back_to_families(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–µ–º–µ–π—Å—Ç–≤"""
    await model_menu(callback.message)

@model_router.callback_query(F.data == "close_model_menu")
async def close_model_menu(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –º–æ–¥–µ–ª–µ–π"""
    await callback.message.delete()
    await callback.answer("–ú–µ–Ω—é –º–æ–¥–µ–ª–µ–π –∑–∞–∫—Ä—ã—Ç–æ")