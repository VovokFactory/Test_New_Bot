# services/audio_service.py
"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ"""

import logging
import os
from telebot import TeleBot
from audio_utils import generate_audio_to_opus, process_voice_message


logger = logging.getLogger(__name__)

def process_voice_message_service(bot: TeleBot, message) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return process_voice_message(bot, message)

def send_audio_response(chat_id: int, text: str, bot: TeleBot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ audio_utils"""
    repl = bot.send_message(chat_id, "üéô")
    logger.info(f"Sending audio for: {text[:50]}...")
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
    # TODO: –ü–æ–ª—É—á–∞—Ç—å –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞
    success, result = generate_audio_to_opus(text, "gemini-2.5-flash-preview-tts", GOOGLE_API_KEY)
    if success:
        audio_path = result
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_path):
                error_msg = f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}"
                logger.error(error_msg)
                bot.send_message(chat_id, error_msg)
                return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(audio_path)
            logger.info(f"Audio file size: {file_size} bytes")
            if file_size == 0:
                error_msg = "‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π"
                logger.error(error_msg)
                bot.send_message(chat_id, error_msg)
                return
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=repl.message_id,
                text="üéô –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤!"
        )
            with open(audio_path, 'rb') as audio_file:
                bot.send_audio(chat_id, audio_file)
                logger.info("Audio sent successfully")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(audio_path)
            logger.info("Temporary file removed")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {str(e)}"
            logger.exception(error_msg)
            bot.send_message(chat_id, error_msg)
    else:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {result}"
        logger.error(error_msg)
        bot.send_message(chat_id, error_msg)

def send_audio_with_progress(chat_id: int, message, answer: str, bot: TeleBot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # 1. –ê–Ω–∏–º–∞—Ü–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    bot.send_chat_action(chat_id, 'record_audio')  # –ê–Ω–∏–º–∞—Ü–∏—è "–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ"
    progress_audio = bot.reply_to(
        message,
        "_–û–∑–≤—É—á–∏–≤–∞—é –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç_",
        reply_to_message_id=message.id,
        parse_mode='Markdown'
    )
    

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
    send_audio_response(chat_id, answer, bot)
    # 3. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(chat_id, progress_audio.id)
