# services/voice_queue.py
import asyncio
import logging
import os
from typing import Optional, Tuple
from aiogram import Bot
from config import VOICE_WORKERS_COUNT
from audio_utils import process_voice_message
from services.model_service import generate_model_response
from utils.helpers import send_response
from services.audio_service import send_audio_with_progress
from services.context_service import get_voice_mode

logger = logging.getLogger(__name__)

class VoiceQueue:
    """
    –û—á–µ—Ä–µ–¥—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è aiogram 3.x

    –°—Ü–µ–Ω–∞—Ä–∏–π:
      1) –í —Ö—ç–Ω–¥–ª–µ—Ä–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: —Å—Ç–∞—Ç—É—Å "—Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..." –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π üé§.
      2) –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: –£–î–ê–õ–Ø–ï–ú üé§, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞:
         "üé§–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n<—Ç–µ–∫—Å—Ç>\n–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç".
      3) –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º üìù.
      4) –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —É–¥–∞–ª—è–µ–º üìù –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å: "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω".
      5) –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ reply –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–æ–º—É.
    """

    def __init__(self, bot: Bot, loop: asyncio.AbstractEventLoop):
        self.bot = bot
        self.loop = loop
        # –≠–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏: (voice_message, status_msg, icon_voice_msg)
        self.queue: asyncio.Queue[Tuple] = asyncio.Queue()
        self.workers: list[asyncio.Task] = []
        self.running = False
        self.google_api_key = os.getenv("GOOGLE_API_KEY")

    def start(self):
        if self.running:
            return
        self.running = True
        for i in range(VOICE_WORKERS_COUNT):
            self.workers.append(asyncio.create_task(self._worker(f"worker-{i+1}")))
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(self.workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞")

    def stop(self):
        if not self.running:
            return
        self.running = False
        for w in self.workers:
            w.cancel()
        self.workers.clear()
        logger.info("–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def add_message(self, voice_message, status_msg, icon_voice_msg):
        # –ö–ª–∞–¥—ë–º –∑–∞–¥–∞—á—É —Å –æ–±–æ–∏–º–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
        asyncio.create_task(self.queue.put((voice_message, status_msg, icon_voice_msg)))

    async def _worker(self, name: str):
        logger.info(f"{name}: –∑–∞–ø—É—â–µ–Ω")
        while self.running:
            try:
                voice_message, status_msg, icon_voice_msg = await asyncio.wait_for(
                    self.queue.get(), timeout=1.0
                )
            except asyncio.TimeoutError:
                continue

            try:
                chat_id = voice_message.chat.id

                # 1) –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
                text = await process_voice_message(self.bot, voice_message, self.google_api_key)
                if not isinstance(text, str) or text.strip().startswith("‚ùå"):
                    # –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: —É–¥–∞–ª—è–µ–º üé§, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—ã—Ö–æ–¥–∏–º
                    await self._safe_delete(chat_id, getattr(icon_voice_msg, "message_id", None))
                    try:
                        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {text}")
                    except Exception:
                        pass
                    continue

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–º–æ–¥–∑–∏ –°–†–ê–ó–£ –ü–û–°–õ–ï —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)
                await self._safe_delete(chat_id, getattr(icon_voice_msg, "message_id", None))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                recognized_block = f"üé§–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text.strip()}\n–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç"
                try:
                    await status_msg.edit_text(recognized_block)
                except Exception:
                    pass

                # 2) –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                icon_answer_msg = await self.bot.send_message(chat_id, "üìù")

                # 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è ‚Üí –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI)
                response = await asyncio.to_thread(generate_model_response, chat_id, text, None)

                # –£–¥–∞–ª—è–µ–º üìù –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                await self._safe_delete(chat_id, getattr(icon_answer_msg, "message_id", None))

                if not response:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
                    try:
                        await status_msg.edit_text(
                            recognized_block.replace("–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                        )
                    except Exception:
                        pass
                    continue

                # 4) –ú–µ–Ω—è–µ–º "–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç" ‚Üí "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
                try:
                    await status_msg.edit_text(
                        recognized_block.replace("–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç", "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    )
                except Exception:
                    pass

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ reply –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É
                await send_response(self.bot, chat_id, response, voice_message.message_id)

                # –û–∑–≤—É—á–∫–∞ –ø–æ —Ä–µ–∂–∏–º—É
                if get_voice_mode(chat_id) and response:
                    await send_audio_with_progress(
                        self.bot, chat_id, response, voice_message.message_id
                    )

            except Exception as e:
                logger.error(f"{name}: {e}", exc_info=True)
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–±—É–µ–º —É–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
                try:
                    await self._safe_delete(voice_message.chat.id, getattr(icon_voice_msg, "message_id", None))
                except Exception:
                    pass
            finally:
                self.queue.task_done()
        logger.info(f"{name}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _safe_delete(self, chat_id: int, message_id: Optional[int]):
        if not message_id:
            return
        try:
            await self.bot.delete_message(chat_id, message_id)
        except Exception:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ç–∞–π–º–∏–Ω–≥–∏ Telegram –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            pass

# –°–∏–Ω–≥–ª—Ç–æ–Ω –æ—á–µ—Ä–µ–¥–∏
_voice_queue_instance: Optional[VoiceQueue] = None

def get_voice_queue(bot: Bot = None, loop: asyncio.AbstractEventLoop = None) -> Optional[VoiceQueue]:
    global _voice_queue_instance
    if _voice_queue_instance is None and bot is not None and loop is not None:
        _voice_queue_instance = VoiceQueue(bot, loop)
    return _voice_queue_instance
