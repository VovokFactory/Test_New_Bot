# services/voice_queue.py
import queue
import threading
import time
import logging
import os
from typing import List
from telebot import TeleBot
from config import VOICE_WORKERS_COUNT
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ audio_utils
from audio_utils import process_voice_message
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ù–û–í–£–Æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ model_service –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –∏–∑ gemini_service
from services.model_service import generate_model_response # <-- –ò–ó–ú–ï–ù–ï–ù–û
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
from utils.helpers import send_response
from services.audio_service import send_audio_response, send_audio_with_progress
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è voice_mode
from services.context_service import get_voice_mode

logger = logging.getLogger(__name__)

class VoiceProcessingQueue:
    """–û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏."""

    def __init__(self, bot: TeleBot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–æ—Ä–∫–µ—Ä–æ–≤).

        Args:
            bot (TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self.bot = bot
        self._queue = queue.Queue()
        self._worker_threads: List[threading.Thread] = []
        self._stop_event = threading.Event()
        self.is_running = False
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.num_workers = max(1, VOICE_WORKERS_COUNT) # –ú–∏–Ω–∏–º—É–º 1 –≤–æ—Ä–∫–µ—Ä

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–æ—Ä–∫–µ—Ä–æ–≤) –æ—á–µ—Ä–µ–¥–∏."""
        if not self.is_running:
            self._stop_event.clear()
            self._worker_threads = []
            for i in range(self.num_workers):
                worker_thread = threading.Thread(
                    target=self._worker,
                    name=f"VoiceWorker-{i+1}",
                    daemon=True
                )
                worker_thread.start()
                self._worker_threads.append(worker_thread)
                logger.info(f"–ó–∞–ø—É—â–µ–Ω –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: VoiceWorker-{i+1}")

            self.is_running = True
            logger.info(f"–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å {self.num_workers} –≤–æ—Ä–∫–µ—Ä–∞–º–∏.")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–æ—Ä–∫–µ—Ä–æ–≤) –æ—á–µ—Ä–µ–¥–∏."""
        if self.is_running:
            self._stop_event.set()
            # –ü–æ–ª–æ–∂–∏–º "—è–¥–æ–≤–∏—Ç—ã–µ —Ç–∞–±–ª–µ—Ç–∫–∏" –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞, —á—Ç–æ–±—ã —Ä–∞–∑–±—É–¥–∏—Ç—å –∏—Ö
            for _ in range(self.num_workers):
                self._queue.put(None)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            for worker_thread in self._worker_threads:
                if worker_thread.is_alive():
                    worker_thread.join(timeout=5) # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π

            self._worker_threads = []
            self.is_running = False
            logger.info("–í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    def add(self, chat_id: int, message, api_key: str, progress_message_id: int = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.

        Args:
            chat_id (int): ID —á–∞—Ç–∞.
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            api_key (str): API –∫–ª—é—á Google.
            progress_message_id (int, optional): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        """
        item = {
            'chat_id': chat_id,
            'message': message,
            'api_key': api_key,
            'timestamp': time.time(),
            'progress_message_id': progress_message_id # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        }
        self._queue.put(item)
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {self._queue.qsize()}")

    def _worker(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ/–≤–æ—Ä–∫–µ—Ä–µ)."""
        worker_name = threading.current_thread().name
        logger.info(f"{worker_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
        while not self._stop_event.is_set():
            try:
                # –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º timeout –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ stop_event
                item = self._queue.get(timeout=1)

                # "–Ø–¥–æ–≤–∏—Ç–∞—è —Ç–∞–±–ª–µ—Ç–∫–∞" –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if item is None:
                    logger.info(f"{worker_name} –ø–æ–ª—É—á–∏–ª '—è–¥–æ–≤–∏—Ç—É—é —Ç–∞–±–ª–µ—Ç–∫—É', –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
                    break

                chat_id = item['chat_id']
                message = item['message']
                api_key = item['api_key']
                progress_message_id = item.get('progress_message_id')

                logger.info(f"{worker_name} –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}...")
                self._process_voice_item(chat_id, message, api_key, progress_message_id)
                self._queue.task_done()
                logger.info(f"{worker_name} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}.")

            except queue.Empty:
                # Timeout –∏—Å—Ç–µ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º stop_event –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                continue
            except Exception as e:
                logger.error(f"{worker_name}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º worker –∏–∑-–∑–∞ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
        logger.info(f"{worker_name} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

    def _process_voice_item(self, chat_id: int, message, api_key: str, progress_message_id: int = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        Args:
            chat_id (int): ID —á–∞—Ç–∞.
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
            api_key (str): API –∫–ª—é—á Google.
            progress_message_id (int, optional): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        """
        # progress_message_id –º–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–µ –∏–∑ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        try:
            # 1. –ï—Å–ª–∏ progress_message_id –Ω–µ –∑–∞–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            #    (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)
            if progress_message_id is None:
                 progress_msg = self.bot.reply_to(
                    message,
                    "_–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏..._",
                    parse_mode='Markdown'
                )
                 progress_message_id = progress_msg.id
                 logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {progress_message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}")

            repl = self.bot.send_message(chat_id, "üé§")

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
            #    –°–æ–æ–±—â–µ–Ω–∏–µ "–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..." —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
            text = process_voice_message(self.bot, message, api_key) # –ü–µ—Ä–µ–¥–∞–µ–º bot –∏ api_key

            if text and not text.startswith("‚ùå"):
                # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ... –§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
                try:
                    self.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=progress_message_id,
                        text=f"üé§*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* {text}\n_–§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç..._",
                        parse_mode='Markdown'
                    )
                    self.bot.delete_message(chat_id, repl.id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "üé§"
                    repl = self.bot.send_message(chat_id, "üìù")

                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {progress_message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ' –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

                # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ù–ï–ô–¢–†–ê–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
                # answer = generate_response(chat_id, text) # <-- –°–¢–ê–†–û–ï
                answer = generate_model_response(chat_id, text) # <-- –ù–û–í–û–ï

                # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                send_response(self.bot, chat_id, answer, reply_to=message.id) # –ü–µ—Ä–µ–¥–∞–µ–º bot


                # 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ..."
                try:
                    self.bot.delete_message(chat_id, repl.id)
                    self.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=progress_message_id,
                        text=f"üé§*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:*\n{text}\nüìù_–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω_",
                        parse_mode='Markdown'
                   )
                    logger.info(f"–§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {progress_message_id} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

                # 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                if get_voice_mode(chat_id): # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ services/context_service.py
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    send_audio_with_progress(chat_id, message, answer, self.bot) # –ü–µ—Ä–µ–¥–∞–µ–º bot

            else:
                # –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                error_text = text if text else "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                try:
                    self.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=progress_message_id,
                        text=error_text
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
                logger.info(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}: {error_text}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if progress_message_id:
                    # –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    self.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=progress_message_id,
                        text=f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                    )
                else:
                    # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.bot.reply_to(message, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            except Exception as reply_e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {reply_e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
voice_queue_instance = None

def get_voice_queue(bot: TeleBot = None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç) –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏.

    Args:
        bot (TeleBot, optional): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.

    Returns:
        VoiceProcessingQueue: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏.

    Raises:
        ValueError: –ï—Å–ª–∏ bot –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.
    """
    global voice_queue_instance
    if voice_queue_instance is None:
        if bot is None:
            raise ValueError("–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (bot) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ get_voice_queue.")
        voice_queue_instance = VoiceProcessingQueue(bot)
    return voice_queue_instance
