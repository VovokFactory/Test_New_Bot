# services/voice_queue.py
import asyncio
import logging
import os
from typing import Optional, Tuple
from aiogram import Bot
from config import VOICE_WORKERS_COUNT
from audio_utils import process_voice_message
from services.model_service import generate_model_response
from utils.helpers import send_response  # –í–ê–ñ–ù–û: —ç—Ç–æ async-–≤–µ—Ä—Å–∏—è –∏–∑ utils/helpers.py
from services.audio_service import send_audio_with_progress
from services.context_service import get_voice_mode

logger = logging.getLogger(__name__)

class VoiceQueue:
    """–û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ aiogram 3.x"""

    def __init__(self, bot: Bot, loop: asyncio.AbstractEventLoop):
        self.bot = bot
        self.loop = loop
        self.queue: asyncio.Queue[Tuple] = asyncio.Queue()
        self.workers: list[asyncio.Task] = []
        self.running = False

        self.google_api_key = os.getenv("GOOGLE_API_KEY")
        if not self.google_api_key:
            logger.error("GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    def start(self):
        if self.running:
            logger.warning("–û—á–µ—Ä–µ–¥—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        self.running = True
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ —Å {VOICE_WORKERS_COUNT} –≤–æ—Ä–∫–µ—Ä–∞–º–∏")
        for i in range(VOICE_WORKERS_COUNT):
            worker = asyncio.create_task(self._worker(f"worker-{i+1}"))
            self.workers.append(worker)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(self.workers)} –≤–æ—Ä–∫–µ—Ä–æ–≤")

    def stop(self):
        if not self.running:
            return
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞...")
        self.running = False
        for worker in self.workers:
            worker.cancel()
        self.workers.clear()
        logger.info("–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def add_message(self, voice_message, processing_message):
        if not self.running:
            logger.error("–û—á–µ—Ä–µ–¥—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        asyncio.create_task(self.queue.put((voice_message, processing_message)))
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

    async def _worker(self, worker_name: str):
        logger.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –∑–∞–ø—É—â–µ–Ω")
        while self.running:
            try:
                voice_message, processing_message = await asyncio.wait_for(self.queue.get(), timeout=1.0)
                logger.info(f"{worker_name}: –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                await self._process_voice_message(voice_message, processing_message, worker_name)
                self.queue.task_done()
            except asyncio.TimeoutError:
                continue
            except asyncio.CancelledError:
                logger.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ {worker_name}: {e}", exc_info=True)
                continue
        logger.info(f"–í–æ—Ä–∫–µ—Ä {worker_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _process_voice_message(self, voice_message, processing_message, worker_name: str):
        chat_id = voice_message.chat.id
        user_id = voice_message.from_user.id
        username = voice_message.from_user.username or "Unknown"

        try:
            # 1) –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (async)
            logger.info(f"{worker_name}: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}")
            if not self.google_api_key:
                await processing_message.edit_text("‚ùå API –∫–ª—é—á Google –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return

            transcribed_text = await process_voice_message(self.bot, voice_message, self.google_api_key)

            if not isinstance(transcribed_text, str) or transcribed_text.strip().startswith("‚ùå"):
                await processing_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {transcribed_text}")
                return

            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ: –±–ª–æ–∫ "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <—Ç–µ–∫—Å—Ç>" –∏ –¥–∞–ª–µ–µ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            recognized_block = f"üñã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{transcribed_text.strip()}"
            await processing_message.edit_text(recognized_block)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –ù–ï —É–¥–∞–ª—è–µ–º [2][6]

            # 2) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (sync ‚Üí to_thread)
            logger.info(f"{worker_name}: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç")
            # –ù–∞ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            try:
                await processing_message.edit_text(f"{recognized_block}\n\nüìù –§–æ—Ä–º—É–ª–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
            except Exception:
                pass

            # –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã–Ω–æ—Å –≤ –ø–æ—Ç–æ–∫ [7][9]
            response_text = await asyncio.to_thread(generate_model_response, chat_id, transcribed_text, None)

            if not response_text:
                await processing_message.edit_text(f"{recognized_block}\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
                return

            # 3) –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
            try:
                await processing_message.edit_text(f"{recognized_block}\n\nüìù –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            except Exception:
                pass

            # 4) –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∫–∞–∫ reply –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
            await send_response(self.bot, chat_id, response_text, voice_message.message_id)

            # 5) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∑–≤—É—á–∫–∞
            if get_voice_mode(chat_id):
                await send_audio_with_progress(
                    bot=self.bot,
                    chat_id=chat_id,
                    text=response_text,
                    reply_to_message_id=voice_message.message_id
                )

            logger.info(f"{worker_name}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}")

        except Exception as e:
            logger.error(f"{worker_name}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}: {e}", exc_info=True)
            try:
                await processing_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception:
                pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏–Ω–≥–ª—Ç–æ–Ω-—ç–∫–∑–µ–º–ø–ª—è—Ä –æ—á–µ—Ä–µ–¥–∏
_voice_queue_instance: Optional[VoiceQueue] = None

def get_voice_queue(bot: Bot = None, loop: asyncio.AbstractEventLoop = None) -> Optional[VoiceQueue]:
    global _voice_queue_instance
    if _voice_queue_instance is None and bot is not None and loop is not None:
        _voice_queue_instance = VoiceQueue(bot, loop)
    return _voice_queue_instance
